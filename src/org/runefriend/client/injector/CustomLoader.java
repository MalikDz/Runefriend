package org.runefriend.client.injector;

import java.net.*;
import java.util.Map;
import java.security.*;
import java.security.cert.Certificate;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.tree.ClassNode;

/**
 * 
 * @author MalikDz
 *
 */

public class CustomLoader extends URLClassLoader {

	/**
	 * 
	 * this field will contain the modified class that we will load
	 * 
	 */

	private Map<String, ClassNode> classCache;

	/**
	 * 
	 * creates a jar class loader that will load our injected classes
	 * 
	 */

	public CustomLoader(Map<String, ClassNode> classCache, URL[] url) {
		super(url);
		this.classCache = classCache;
	}

	/**
	 * 
	 * @return a loaded class that might have been generated by us
	 * 
	 */

	@Override
	public Class<?> loadClass(String cName) throws ClassNotFoundException {
		return findClass(cName);
	}

	/**
	 * 
	 * @return a loaded class that might have been generated by us
	 * 
	 */

	@Override
	public Class<?> findClass(String cName) throws ClassNotFoundException {
		return classCache.containsKey(cName) ? getClassFromCNode(classCache.get(cName)) : super.loadClass(cName);
	}

	/**
	 * 
	 * @return a class generated with a classnode where we injected our bytecode
	 * 
	 */

	private Class<?> getClassFromCNode(ClassNode classNode) {
		ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
		classNode.accept(cw);
		byte[] b = cw.toByteArray();
		return defineClass(classNode.name.replace('/', '.'), b, 0, b.length, getDomain());
	}

	/**
	 * 
	 * @return permissions that will allow any class to be loaded
	 * 
	 */

	private final Permissions getPermissions() {
		Permissions permissions = new Permissions();
		permissions.add(new AllPermission());
		return permissions;
	}

	/**
	 * 
	 * @return the protection domain which allow all classes to be loaded
	 * 
	 */

	private final ProtectionDomain getDomain() {
		return new ProtectionDomain(new CodeSource(null, (Certificate[]) null), getPermissions());
	}
}
